import { WorkoutRepository } from '../../domain/repositories/WorkoutRepository';
import { Workout } from '../../domain/entities/Workout';
import { workoutApi } from '../api/workoutApi';
import { store } from '../store/store';

export class WorkoutRepositoryImpl implements WorkoutRepository {
  async getWorkouts(): Promise<Workout[]> {
    try {
      console.log('WorkoutRepositoryImpl: Fetching all workouts');
      const response = await store.dispatch(
        workoutApi.endpoints.getWorkouts.initiate(undefined, {
          forceRefetch: true,
        }),
      );

      if ('data' in response && response.data) {
        console.log(
          'WorkoutRepositoryImpl: Found workouts:',
          Array.isArray(response.data) ? response.data.length : 'unknown',
        );
        return response.data as Workout[];
      }

      console.log('WorkoutRepositoryImpl: No workouts found');
      return [];
    } catch (error) {
      console.error('WorkoutRepositoryImpl: Error fetching workouts:', error);
      throw new Error('Failed to fetch workouts');
    }
  }

  async getWorkoutById(id: string): Promise<Workout | null> {
    try {
      console.log('WorkoutRepositoryImpl: Fetching workout with ID:', id);

      // Force a refetch to ensure we get the latest data
      const response = await store.dispatch(
        workoutApi.endpoints.getWorkoutById.initiate(id, {
          forceRefetch: true,
        }),
      );

      console.log(
        'WorkoutRepositoryImpl: Raw response:',
        JSON.stringify(response, null, 2),
      );

      if ('data' in response && response.data) {
        console.log(
          'WorkoutRepositoryImpl: Found workout data:',
          response.data,
        );
        return response.data as Workout;
      }

      console.log('WorkoutRepositoryImpl: No data in response');
      return null;
    } catch (error) {
      console.error(
        'WorkoutRepositoryImpl: Error fetching workout by ID:',
        error,
      );
      return null;
    }
  }

  async saveWorkout(workout: Workout): Promise<void> {
    try {
      console.log('WorkoutRepositoryImpl: Saving workout:', workout);

      if (
        workout.id &&
        workout.id !== undefined &&
        workout.id !== null &&
        workout.id !== ''
      ) {
        // Update existing workout
        console.log(
          'WorkoutRepositoryImpl: Updating existing workout with ID:',
          workout.id,
        );
        await store.dispatch(
          workoutApi.endpoints.updateWorkout.initiate(workout),
        );
      } else {
        // Add new workout (id will be generated by the API)
        console.log('WorkoutRepositoryImpl: Adding new workout (no ID)');
        const { ...workoutWithoutId } = workout; // Remove the id field using destructuring

        await store.dispatch(
          workoutApi.endpoints.addWorkout.initiate(
            workoutWithoutId as Omit<Workout, 'id'>,
          ),
        );
      }
      console.log('WorkoutRepositoryImpl: Workout saved successfully');
    } catch (error) {
      console.error('WorkoutRepositoryImpl: Error saving workout:', error);
      throw new Error('Failed to save workout');
    }
  }

  async deleteWorkout(id: string): Promise<void> {
    try {
      console.log('WorkoutRepositoryImpl: Deleting workout with ID:', id);

      const response = await store.dispatch(
        workoutApi.endpoints.deleteWorkout.initiate(id, {
          track: true,
        }),
      );

      console.log('WorkoutRepositoryImpl: Delete workout response:', response);

      // Check if there was an error in the response
      if ('error' in response) {
        console.error(
          'WorkoutRepositoryImpl: Error in delete response:',
          response.error,
        );
        throw new Error(
          `Failed to delete workout: ${JSON.stringify(response.error)}`,
        );
      }

      console.log('WorkoutRepositoryImpl: Workout deleted successfully');
    } catch (error) {
      console.error('WorkoutRepositoryImpl: Error deleting workout:', error);
      throw new Error(
        `Failed to delete workout: ${
          error instanceof Error ? error.message : 'Unknown error'
        }`,
      );
    }
  }

  async completeWorkout(id: string, completedDate: string): Promise<Workout> {
    try {
      console.log(
        'WorkoutRepositoryImpl: Completing workout with ID:',
        id,
        'and date:',
        completedDate,
      );

      // First, check if the workout exists
      const existingWorkout = await this.getWorkoutById(id);
      if (!existingWorkout) {
        console.error(`WorkoutRepositoryImpl: Workout with ID ${id} not found`);
        throw new Error(`Workout with ID ${id} not found`);
      }

      // Call the API to complete the workout with track: true to ensure proper tracking
      const response = await store.dispatch(
        workoutApi.endpoints.completeWorkout.initiate(
          {
            id,
            completedDate,
          },
          { track: true },
        ),
      );

      // Log the response for debugging
      console.log(
        'WorkoutRepositoryImpl: Complete workout response:',
        JSON.stringify(response, null, 2),
      );

      // Check if there was an error in the response
      if ('error' in response) {
        console.error(
          'WorkoutRepositoryImpl: Error in complete response:',
          response.error,
        );
        throw new Error(
          `Failed to complete workout: ${JSON.stringify(response.error)}`,
        );
      }

      // Check if we have data in the response
      if ('data' in response && response.data) {
        console.log(
          'WorkoutRepositoryImpl: Workout completed successfully with data in response',
        );
        return response.data as Workout;
      }

      // If the API call was successful but didn't return data,
      // we'll fetch the updated workout directly
      console.log(
        'WorkoutRepositoryImpl: No data in response, fetching updated workout',
      );

      // Add a small delay to ensure the API has processed the update
      await new Promise(resolve => setTimeout(resolve, 500));

      const updatedWorkout = await this.getWorkoutById(id);
      if (updatedWorkout) {
        console.log(
          'WorkoutRepositoryImpl: Successfully fetched updated workout',
        );

        // Verify that the workout is actually marked as completed
        if (updatedWorkout.completed) {
          return updatedWorkout;
        } else {
          // If not completed, manually update it
          console.log(
            'WorkoutRepositoryImpl: Workout not marked as completed, updating manually',
          );
          const manuallyUpdated = {
            ...updatedWorkout,
            completed: true,
            completedDate,
          };

          // Save the manually updated workout
          await this.saveWorkout(manuallyUpdated);
          return manuallyUpdated;
        }
      }

      console.error(
        'WorkoutRepositoryImpl: Could not retrieve updated workout after completion',
      );
      throw new Error(
        'Failed to complete workout: Could not retrieve updated workout',
      );
    } catch (error) {
      console.error('WorkoutRepositoryImpl: Error completing workout:', error);
      throw new Error(
        `Failed to complete workout: ${
          error instanceof Error ? error.message : 'Unknown error'
        }`,
      );
    }
  }

  async getWorkoutsForDate(date: string): Promise<Workout[]> {
    try {
      const response = await store.dispatch(
        workoutApi.endpoints.getWorkoutsForDate.initiate(date, {
          forceRefetch: true,
        }),
      );

      if ('data' in response && response.data) {
        return response.data as Workout[];
      }
      return [];
    } catch (error) {
      console.error(
        'WorkoutRepositoryImpl: Error fetching workouts for date:',
        error,
      );
      throw new Error('Failed to fetch workouts for date');
    }
  }
}
